#!/bin/bash
#-----------------------------------------
# Utility for quick note taking using 
# mdbook. See usage below...
#
# @author ftouchte
# @date June 6, 2025 (last modification)
#-----------------------------------------

# Define the logbook path
LOGBOOK_PATH="/home/touchte-codjo/.logbook"

# Print help if no arguments are provided
if [ $# -lt 1 ]; then
	echo "Expect command : [add] or [serve] or [deploy]"
	echo "Usage :"
	echo "   1) logbook add \"title\" \"description\" \"image.png\" "
	echo "            ---> used to add new entry in the logbook"	
	echo "   2) logbook serve"
	echo "            ---> like \`mdbook serve\`, it gives a view of the logbook on a local serve"	
	echo "   3) logbook deploy"
	echo "            ---> send the current state of the log book on github, that's also update the online version of the logbook"	
elif [ $# -ge 1 ]; then
	# command add
	if [ "$1" = "add" ]; then
		# Require at least a title 
		if [ $# -ge 2 ]; then 
			title=$2
			description=""
			# If no description provided, even no "", prompt the user to enter a description
			if [ $# -le 2 ]; then
				text=""
				echo "Description"
				nlines=1
				while read -r -p " $nlines " line; do
					if [[ $nlines == 1 ]]; then
						text="$line"
					else
						text="$text\n$line"
					fi
					((nlines++))
				done
				description=$text
			else 
				description=$3
			fi
			# Checking for attachements, typically pictures : png, jpeg, ...
			echo ""
			echo "Attachements"
			attachements=""
			natt=1
			while read -e -r -p " $natt " line; do # option -e allow the autocompletion
				((natt++))
				if [[ $nlines == 1 ]]; then
					attachements="![.]($line)"
				else
					attachements="$attachements\n![.]($line)"
				fi
			done
			#if [ $# -ge 4 ]; then
				read -e -r -p " | " picture
				echo "$picture"
			#fi
			exit

###--------------------------------------------------------
###
###  Part below not checked
###
###
###--------------------------------------------------------
			description=$3
			filename="" #for now
			today_date=$(date "+%y-%m-%d")
			instant=$(date "+%T")
			# We expect the 4-th arg to be the filename.	
			if [ $# -ge 4 ]; then	
				filename=$4
				if [ -f "$filename" ]; then
					# Check the existence of the repository of the day; if not create one
					if [ ! -d "$LOGBOOK_PATH/src/img/$today_date" ]; then
						mkdir -p "$LOGBOOK_PATH/src/img/$today_date"
					fi
					instant2=$(echo $instant | sed "s/:/-/g") # remplace ":" by "-" to better name a file
					cp $filename "$LOGBOOK_PATH/src/img/$today_date/$today_date-$instant2.png"
					# Above we still need to extract the real extension of the picture (.png, .jpg, etc...)
				else 
					echo "$filename is not a regular file (we also expect a *.png)"
					filename=""
					# This part really needs the comment above to be taken in consideration
				fi
			fi
			# Create or fill the note of the day at the current the time
			# If the journal of the day does not exit, create one !
			if [ ! -f "$LOGBOOK_PATH/src/$today_date.md" ]; then
				touch "$LOGBOOK_PATH/src/$today_date.md"
				echo "# DATE â†’ $today_date" >> "$LOGBOOK_PATH/src/$today_date.md"
				echo "" >> "$LOGBOOK_PATH/src/$today_date.md"
				echo "" >> "$LOGBOOK_PATH/src/$today_date.md" # create the line 3
				#-- Update the SUMMARY.md file --
				sed "7i\\[$today_date](./$today_date.md)\n" "$LOGBOOK_PATH/src/SUMMARY.md" >> tmp_summary
				mv tmp_summary "$LOGBOOK_PATH/src/SUMMARY.md"
			fi
			#-- Fill the journal of the day --
			# If filename is not empty
			#######################################################
			entry_text="3i\\### ($today_date $instant) $title \n$description"
			if [ $# -ge 4 ]; then
				for nth in $(seq 4 $#); do
					finename="$nth"
					# extract the extension
					splitted=echo "filename" | sed "s/\(.*\)\.\(.*\)/\1 \2/g";
					name=""
					extension=""
					itr=0;
					for word in $splitted; do
						((itr++))
						if [[ $itr == 1 ]]; then
							name=$word
						elif [[ $itr == 2 ]]; then
							extension=$word
						fi
					done
					if [ -f "$filename" ]; then
						# Check the existence of the repository of the day; if not create one
						if [ ! -d "$LOGBOOK_PATH/src/img/$today_date" ]; then
							mkdir -p "$LOGBOOK_PATH/src/img/$today_date"
						fi
						instant2=$(echo $instant | sed "s/:/-/g") # remplace ":" by "-" to better name a file
						cp $filename "$LOGBOOK_PATH/src/img/$today_date/$today_date-$instant2.$extension"
						entry_text="$entry_text \n ![$today_date-$instant2.png](./img/$today_date/$today_date-$instant2.$extension)"
					else 
						echo "$filename is not a regular file (we also expect an extension: .png, .jpeg, ...)"
					fi
				done
			fi
			sed "$entry_text" >> tmp_file
			echo $tmp_file
			#######################################################
			#if [ ! -z "$filename" ]; then
			#	sed "3i\\### ($today_date $instant) $title \n$description \n![$today_date-$instant2.png](./img/$today_date/$today_date-$instant2.png) \n" "$LOGBOOK_PATH/src/$today_date.md" >> tmp_file
			#else 
			#	sed "3i\\### ($today_date $instant) $title \n$description \n" "$LOGBOOK_PATH/src/$today_date.md" >> tmp_file
			#fi
			#mv tmp_file "$LOGBOOK_PATH/src/$today_date.md"
		else 
			echo "Expect at least 2 arguments."
			echo "Type lobbook help"
		fi
	elif [ "$1" = "serve" ]; then
		mdbook serve $LOGBOOK_PATH --open
	elif [ "$1" = "deploy" ]; then
		current_dir="$(pwd)"
		cd $LOGBOOK_PATH
		mdbook build
		git add .
		git commit -m "Deploy logbook `date "+%D %T"`"
		git push
		cd $current_dir
		echo -e "\033[32mLog Book deployed \033[0m"
	else
		echo "Expect command : [add] or [serve] or [deploy]"
		echo "Usage :"
		echo "   1) logbook add \"title\" \"description\" \"image.png\" "
	       	echo "            ---> used to add new entry in the logbook"	
		echo "   2) logbook serve"
	       	echo "            ---> like \`mdbook serve\`, it gives a view of the logbook on a local serve"	
		echo "   3) logbook deploy"
	       	echo "            ---> send the current state of the log book on github, that's also update the online version of the logbook"	
	fi
fi
